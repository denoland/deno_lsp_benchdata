/* esm.sh - esbuild bundle(@opentelemetry/sdk-trace-node@1.17.0) denonext production */
import __Process$ from "node:process";
import * as __0$ from "/v135/@opentelemetry/sdk-trace-base@1.17.0/denonext/sdk-trace-base.mjs";
import * as __1$ from "/v135/@opentelemetry/context-async-hooks@1.17.0/denonext/context-async-hooks.mjs";
import * as __2$ from "/v135/@opentelemetry/propagator-b3@1.17.0/denonext/propagator-b3.mjs";
import * as __3$ from "/v135/@opentelemetry/sdk-trace-base@1.17.0/denonext/sdk-trace-base.mjs";
import * as __4$ from "/v135/semver@7.5.4/denonext/semver.mjs";
import * as __5$ from "/v135/@opentelemetry/propagator-jaeger@1.17.0/denonext/propagator-jaeger.mjs";
var require=n=>{const e=m=>typeof m.default<"u"?m.default:m,c=m=>Object.assign({},m);switch(n){case"@opentelemetry/sdk-trace-base":return c(__0$);case"@opentelemetry/context-async-hooks":return c(__1$);case"@opentelemetry/propagator-b3":return c(__2$);case"semver":return e(__4$);case"@opentelemetry/propagator-jaeger":return c(__5$);default:throw new Error("module \""+n+"\" not found");}};
var j=Object.create;var g=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var E=Object.getOwnPropertyNames;var x=Object.getPrototypeOf,h=Object.prototype.hasOwnProperty;var i=(r=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(r,{get:(e,t)=>(typeof require<"u"?require:e)[t]}):r)(function(r){if(typeof require<"u")return require.apply(this,arguments);throw Error('Dynamic require of "'+r+'" is not supported')});var f=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),w=(r,e)=>{for(var t in e)g(r,t,{get:e[t],enumerable:!0})},p=(r,e,t,a)=>{if(e&&typeof e=="object"||typeof e=="function")for(let s of E(e))!h.call(r,s)&&s!==t&&g(r,s,{get:()=>e[s],enumerable:!(a=y(e,s))||a.enumerable});return r},c=(r,e,t)=>(p(r,e,"default"),t&&p(t,e,"default")),P=(r,e,t)=>(t=r!=null?j(x(r)):{},p(e||!r||!r.__esModule?g(t,"default",{value:r,enumerable:!0}):t,r));var v=f(_=>{"use strict";Object.defineProperty(_,"__esModule",{value:!0});_.NodeTracerProvider=void 0;var S=i("@opentelemetry/context-async-hooks"),d=i("@opentelemetry/propagator-b3"),m=i("@opentelemetry/sdk-trace-base"),O=i("semver"),T=i("@opentelemetry/propagator-jaeger"),u=class extends m.BasicTracerProvider{constructor(e={}){super(e)}register(e={}){if(e.contextManager===void 0){let t=O.gte(__Process$.version,"14.8.0")?S.AsyncLocalStorageContextManager:S.AsyncHooksContextManager;e.contextManager=new t,e.contextManager.enable()}super.register(e)}};_.NodeTracerProvider=u;u._registeredPropagators=new Map([...m.BasicTracerProvider._registeredPropagators,["b3",()=>new d.B3Propagator({injectEncoding:d.B3InjectEncoding.SINGLE_HEADER})],["b3multi",()=>new d.B3Propagator({injectEncoding:d.B3InjectEncoding.MULTI_HEADER})],["jaeger",()=>new T.JaegerPropagator]])});var l=f(o=>{"use strict";var q=o&&o.__createBinding||(Object.create?function(r,e,t,a){a===void 0&&(a=t),Object.defineProperty(r,a,{enumerable:!0,get:function(){return e[t]}})}:function(r,e,t,a){a===void 0&&(a=t),r[a]=e[t]}),B=o&&o.__exportStar||function(r,e){for(var t in r)t!=="default"&&!Object.prototype.hasOwnProperty.call(e,t)&&q(e,r,t)};Object.defineProperty(o,"__esModule",{value:!0});B(v(),o);B(i("@opentelemetry/sdk-trace-base"),o)});var n={};w(n,{AlwaysOffSampler:()=>H,AlwaysOnSampler:()=>D,BasicTracerProvider:()=>K,BatchSpanProcessor:()=>z,ConsoleSpanExporter:()=>J,ForceFlushState:()=>Q,InMemorySpanExporter:()=>G,NodeTracerProvider:()=>W,NoopSpanProcessor:()=>L,ParentBasedSampler:()=>R,RandomIdGenerator:()=>U,SamplingDecision:()=>C,SimpleSpanProcessor:()=>F,Span:()=>A,TraceIdRatioBasedSampler:()=>N,Tracer:()=>V,__esModule:()=>I,default:()=>Y});var b=P(l());c(n,P(l()));var{__esModule:I,Span:A,SamplingDecision:C,TraceIdRatioBasedSampler:N,ParentBasedSampler:R,AlwaysOnSampler:D,AlwaysOffSampler:H,NoopSpanProcessor:L,SimpleSpanProcessor:F,InMemorySpanExporter:G,ConsoleSpanExporter:J,RandomIdGenerator:U,BatchSpanProcessor:z,BasicTracerProvider:K,ForceFlushState:Q,Tracer:V,NodeTracerProvider:W}=b,{default:M,...X}=b,Y=M!==void 0?M:X;export{H as AlwaysOffSampler,D as AlwaysOnSampler,K as BasicTracerProvider,z as BatchSpanProcessor,J as ConsoleSpanExporter,Q as ForceFlushState,G as InMemorySpanExporter,W as NodeTracerProvider,L as NoopSpanProcessor,R as ParentBasedSampler,U as RandomIdGenerator,C as SamplingDecision,F as SimpleSpanProcessor,A as Span,N as TraceIdRatioBasedSampler,V as Tracer,I as __esModule,Y as default};
//# sourceMappingURL=sdk-trace-node.mjs.map