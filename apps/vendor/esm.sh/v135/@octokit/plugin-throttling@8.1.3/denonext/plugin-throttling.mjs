/* esm.sh - esbuild bundle(@octokit/plugin-throttling@8.1.3) denonext production */
import v from"/v135/bottleneck@2.19.5/denonext/light.js";import"/v135/@octokit/core@5.0.2/denonext/core.mjs";var b="8.1.3";var y=()=>Promise.resolve();function L(e,t,n){return e.retryLimiter.schedule(q,e,t,n)}async function q(e,t,n){let i=n.method!=="GET"&&n.method!=="HEAD",{pathname:s}=new URL(n.url,"http://github.test"),h=n.method==="GET"&&s.startsWith("/search/"),l=s.startsWith("/graphql"),o=~~t.retryCount>0?{priority:0,weight:0}:{};e.clustering&&(o.expiration=1e3*60),(i||l)&&await e.write.key(e.id).schedule(o,y),i&&e.triggersNotification(s)&&await e.notifications.key(e.id).schedule(o,y),h&&await e.search.key(e.id).schedule(o,y);let a=e.global.key(e.id).schedule(o,t,n);if(l){let u=await a;if(u.data.errors!=null&&u.data.errors.some(r=>r.type==="RATE_LIMITED"))throw Object.assign(new Error("GraphQL Rate Limit Exceeded"),{response:u,data:u.data})}return a}var _=["/orgs/{org}/invitations","/orgs/{org}/invitations/{invitation_id}","/orgs/{org}/teams/{team_slug}/discussions","/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments","/repos/{owner}/{repo}/collaborators/{username}","/repos/{owner}/{repo}/commits/{commit_sha}/comments","/repos/{owner}/{repo}/issues","/repos/{owner}/{repo}/issues/{issue_number}/comments","/repos/{owner}/{repo}/pulls","/repos/{owner}/{repo}/pulls/{pull_number}/comments","/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies","/repos/{owner}/{repo}/pulls/{pull_number}/merge","/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers","/repos/{owner}/{repo}/pulls/{pull_number}/reviews","/repos/{owner}/{repo}/releases","/teams/{team_id}/discussions","/teams/{team_id}/discussions/{discussion_number}/comments"];function x(e){let n=`^(?:${e.map(i=>i.split("/").map(s=>s.startsWith("{")?"(?:.+?)":s).join("/")).map(i=>`(?:${i})`).join("|")})[^/]*$`;return new RegExp(n,"i")}var E=x(_),A=E.test.bind(E),m={},N=function(e,t){m.global=new e.Group({id:"octokit-global",maxConcurrent:10,...t}),m.search=new e.Group({id:"octokit-search",maxConcurrent:1,minTime:2e3,...t}),m.write=new e.Group({id:"octokit-write",maxConcurrent:1,minTime:1e3,...t}),m.notifications=new e.Group({id:"octokit-notifications",maxConcurrent:1,minTime:3e3,...t})};function C(e,t){let{enabled:n=!0,Bottleneck:i=v,id:s="no-id",timeout:h=1e3*60*2,connection:l}=t.throttle||{};if(!n)return{};let w={connection:l,timeout:h};m.global==null&&N(i,w);let o=Object.assign({clustering:l!=null,triggersNotification:A,fallbackSecondaryRateRetryAfter:60,retryAfterBaseValue:1e3,retryLimiter:new i,id:s,...m},t.throttle);if(typeof o.onSecondaryRateLimit!="function"||typeof o.onRateLimit!="function")throw new Error(`octokit/plugin-throttling error:
        You must pass the onSecondaryRateLimit and onRateLimit error handlers.
        See https://octokit.github.io/rest.js/#throttling

        const octokit = new Octokit({
          throttle: {
            onSecondaryRateLimit: (retryAfter, options) => {/* ... */},
            onRateLimit: (retryAfter, options) => {/* ... */}
          }
        })
    `);let a={},u=new i.Events(a);return a.on("secondary-limit",o.onSecondaryRateLimit),a.on("rate-limit",o.onRateLimit),a.on("error",r=>e.log.warn("Error in throttling-plugin limit handler",r)),o.retryLimiter.on("failed",async function(r,k){let[R,g,p]=k.args,{pathname:G}=new URL(p.url,"http://github.test");if(!(G.startsWith("/graphql")&&r.status!==401||r.status===403))return;let d=~~g.retryCount;g.retryCount=d,p.request.retryCount=d;let{wantRetry:S,retryAfter:T=0}=await async function(){if(/\bsecondary rate\b/i.test(r.message)){let c=Number(r.response.headers["retry-after"])||R.fallbackSecondaryRateRetryAfter;return{wantRetry:await u.trigger("secondary-limit",c,p,e,d),retryAfter:c}}if(r.response.headers!=null&&r.response.headers["x-ratelimit-remaining"]==="0"||(r.response.data?.errors??[]).some(c=>c.type==="RATE_LIMITED")){let c=new Date(~~r.response.headers["x-ratelimit-reset"]*1e3).getTime(),f=Math.max(Math.ceil((c-Date.now())/1e3)+1,0);return{wantRetry:await u.trigger("rate-limit",f,p,e,d),retryAfter:f}}return{}}();if(S)return g.retryCount++,T*R.retryAfterBaseValue}),e.hook.wrap("request",L.bind(null,o)),{}}C.VERSION=b;C.triggersNotification=A;export{C as throttling};
//# sourceMappingURL=plugin-throttling.mjs.map