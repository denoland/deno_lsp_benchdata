/* esm.sh - esbuild bundle(@octokit/plugin-retry@6.0.1) denonext production */
import"/v135/@octokit/core@5.0.2/denonext/core.mjs";async function o(s,n,e,r){if(!e.request||!e.request.request)throw e;if(e.status>=400&&!s.doNotRetry.includes(e.status)){let t=r.request.retries!=null?r.request.retries:s.retries,u=Math.pow((r.request.retryCount||0)+1,2);throw n.retry.retryRequest(e,t,u)}throw e}import f from"/v135/bottleneck@2.19.5/denonext/light.js";import{RequestError as l}from"/v135/@octokit/request-error@5.0.1/denonext/request-error.mjs";async function i(s,n,e,r){let t=new f;return t.on("failed",function(u,a){let q=~~u.request.request.retries,c=~~u.request.request.retryAfter;if(r.request.retryCount=a.retryCount+1,q>a.retryCount)return c*s.retryAfterBaseValue}),t.schedule(y.bind(null,s,n,e),r)}async function y(s,n,e,r){let t=await e(e,r);if(t.data&&t.data.errors&&/Something went wrong while executing your query/.test(t.data.errors[0].message)){let u=new l(t.data.errors[0].message,500,{request:r,response:t});return o(s,n,u,r)}return t}var m="0.0.0-development";function d(s,n){let e=Object.assign({enabled:!0,retryAfterBaseValue:1e3,doNotRetry:[400,401,403,404,422,451],retries:3},n.retry);return e.enabled&&(s.hook.error("request",o.bind(null,e,s)),s.hook.wrap("request",i.bind(null,e,s))),{retry:{retryRequest:(r,t,u)=>(r.request.request=Object.assign({},r.request.request,{retries:t,retryAfter:u}),r)}}}d.VERSION=m;export{m as VERSION,d as retry};
//# sourceMappingURL=plugin-retry.mjs.map