/* esm.sh - esbuild bundle(universal-github-app-jwt@1.1.1) denonext production */
function c(e){let t=new ArrayBuffer(e.length),n=new Uint8Array(t);for(let r=0,o=e.length;r<o;r++)n[r]=e.charCodeAt(r);return t}function d(e){let t=e.trim().split(`
`).slice(1,-1).join(""),n=atob(t);return c(n)}function l(e,t){return`${i(e)}.${i(t)}`}function y(e){for(var t="",n=new Uint8Array(e),r=n.byteLength,o=0;o<r;o++)t+=String.fromCharCode(n[o]);return u(btoa(t))}function u(e){return e.replace(/=/g,"").replace(/\+/g,"-").replace(/\//g,"_")}function i(e){return u(btoa(JSON.stringify(e)))}var b=async({privateKey:e,payload:t})=>{if(/BEGIN RSA PRIVATE KEY/.test(e))throw new Error("[universal-github-app-jwt] Private Key is in PKCS#1 format, but only PKCS#8 is supported. See https://github.com/gr2m/universal-github-app-jwt#readme");let n={name:"RSASSA-PKCS1-v1_5",hash:{name:"SHA-256"}},r={alg:"RS256",typ:"JWT"},o=d(e),s=await crypto.subtle.importKey("pkcs8",o,n,!1,["sign"]),a=l(r,t),g=c(a),p=await crypto.subtle.sign(n.name,s,g),f=y(p);return`${a}.${f}`};async function h({id:e,privateKey:t,now:n=Math.floor(Date.now()/1e3)}){let r=n-30,o=r+60*10,a=await b({privateKey:t,payload:{iat:r,exp:o,iss:e}});return{appId:e,expiration:o,token:a}}export{h as githubAppJwt};
//# sourceMappingURL=universal-github-app-jwt.mjs.map